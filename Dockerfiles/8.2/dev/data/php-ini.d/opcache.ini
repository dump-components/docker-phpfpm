[opcache]
; reference: https://www.php.net/manual/en/opcache.configuration.php
; reference: https://medium.com/appstract/make-your-laravel-app-fly-with-php-opcache-9948db2a5f93

; Determines if Zend OPCache is enabled
zend_extension=opcache.so
opcache.enable=0
opcache.enable_cli=0

; maximum memory that OPcache can use to store compiled PHP files, Symfony recommends 256
opcache.memory_consumption=512

; How many scripts can be cached. Make this as close as possible (or more) to the amount of scripts in your project.
; Choose any of these values: 3907, 7963, 16229, 32531, 65407, 130987 (see the docs for an explanation:
; http://php.net/manual/en/opcache.configuration.php#ini.opcache.max-accelerated-files)
opcache.max_accelerated_files=32531

; This will revalidate the script. If you set this to 0(best performance), you need to manually clear the OPcache
; every time your PHP code changes (we will handle this in the next section). If you don’t want to clear it yourself,
; you can set this to 1 and configure the revalidate interval with opcache.revalidate_freq, this will cost you some
; performance as it needs to check for changes every x seconds.
opcache.revalidate_freq=580
opcache.validate_timestamps=0

; How many Megabyte you want to assign to interned strings. Choose anything higher than 16 (default value)
opcache.interned_strings_buffer=64

; Fast shutdown should give a faster mechanism for clearing memory. However, in my Benchmarks it was a bit slower.
opcache.fast_shutdown=1

; This will preserve comments in your script, I recommend to keep this enabled, as some libraries depend on it,
; and I couldn’t find any benefits from disabling it (except from saving a few bytes RAM).
opcache.save_comments=1
